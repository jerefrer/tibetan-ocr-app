name: Build Packages

on:
  push:
    tags:
      - "v*.*" # Triggers on tags like v1.0.0, v0.1.0, etc.

jobs:
  build:
    timeout-minutes: 60

    strategy:
      matrix:
        os: [windows-latest, macos-13, macos-latest]

    runs-on: ${{ matrix.os }}

    steps:
      - name: Set required env vars (Unix)
        if: runner.os == 'macOS'
        env:
          ARTIFACT_PATH: "BDRC Tibetan OCR.dmg"
        shell: bash
        run: |
          OS=$(echo "$RUNNER_OS" | tr '[:upper:]' '[:lower:]')
          ARCH=$(echo "$RUNNER_ARCH" | tr '[:upper:]' '[:lower:]')
          VERSION="${GITHUB_REF_NAME#v}"
          ARTIFACT_NAME="bdrc_ocr_${OS}_${ARCH}_${VERSION}"
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "ARTIFACT_NAME=$ARTIFACT_NAME" >> $GITHUB_ENV
          echo "ARTIFACT_PATH=$ARTIFACT_PATH" >> $GITHUB_ENV

      - name: Set required env vars (Windows)
        if: runner.os == 'Windows'
        env:
          ARTIFACT_PATH: WindowsBuild/$env:ARTIFACT_NAME.zip
        shell: pwsh
        run: |
          $OS = $env:RUNNER_OS.ToLower()
          $ARCH = $env:RUNNER_ARCH.ToLower()
          $VERSION = $env:GITHUB_REF_NAME -replace '^v',''
          $ARTIFACT_NAME = "bdrc_ocr_${OS}_${ARCH}_${VERSION}"
          echo "VERSION=${VERSION}" | Out-File -FilePath $env:GITHUB_ENV -Append
          echo "ARTIFACT_NAME=${ARTIFACT_NAME}" | Out-File -FilePath $env:GITHUB_ENV -Append
          echo "ARTIFACT_PATH=WindowsBuild/${ARTIFACT_NAME}.zip" | Out-File -FilePath $env:GITHUB_ENV -Append

      - name: Cache Git LFS files
        uses: actions/cache@v4
        with:
          path: .git/lfs
          key: ${{ runner.os }}-lfs-${{ hashFiles('.lfs-assets-id') }}
          restore-keys: |
            ${{ runner.os }}-lfs-

      - uses: actions/checkout@v4
        with:
          lfs: true

      - name: Pull LFS objects
        run: git lfs pull

      - name: Cache Nuitka
        uses: actions/cache@v4
        with:
          path: ${{ github.workspace }}/.nuitka_cache
          key: ${{ runner.os }}-nuitka

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Set up ccache
        uses: hendrikmuhs/ccache-action@v1.2
        with:
          key: ${{ runner.os }}

      - name: Download OCR Models
        run: |
          echo "Downloading OCR models..."
          mkdir -p OCRModels
          curl -L https://github.com/buda-base/tibetan-ocr-app/releases/download/v0.1/bdrc_ocr_models_1.0.zip -o ocr_models.zip
          unzip ocr_models.zip -d .
          echo "Downloaded OCR models successfully"
          ls -la OCRModels

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install nuitka
          pip install pyside6
          pip install -r requirements.txt
          pyside6-rcc resources.qrc -o resources.py

      - name: Download Poppler for Windows
        if: runner.os == 'Windows'
        run: |
          # Create directory for Poppler
          mkdir -p poppler
          mkdir -p poppler\bin

          # Get the latest release information from GitHub API
          $latestRelease = (Invoke-RestMethod -Uri "https://api.github.com/repos/oschwartz10612/poppler-windows/releases/latest")
          $latestVersion = $latestRelease.tag_name.Substring(1)  # Remove the 'v' prefix
          $downloadUrl = $latestRelease.assets | Where-Object { $_.name -like "*.zip" } | Select-Object -First 1 -ExpandProperty browser_download_url

          Write-Host "Latest Poppler version: $latestVersion"
          Write-Host "Download URL: $downloadUrl"

          # Download and extract the latest Poppler for Windows
          Invoke-WebRequest -Uri $downloadUrl -OutFile "poppler.zip"

          # Create a temporary directory for extraction
          mkdir -p temp_poppler
          Expand-Archive -Path "poppler.zip" -DestinationPath "temp_poppler" -Force

          # Find pdfinfo.exe anywhere in the extracted content
          Write-Host "Searching for pdfinfo.exe in the extracted content..."
          $pdfInfoExe = Get-ChildItem -Path "temp_poppler" -Recurse -Filter "pdfinfo.exe" | Select-Object -First 1

          if ($pdfInfoExe) {
            $binDir = $pdfInfoExe.Directory
            Write-Host "Found pdfinfo.exe at: $($pdfInfoExe.FullName)"
            Write-Host "Bin directory: $($binDir.FullName)"
            
            # Copy all files from the bin directory to poppler/bin
            Write-Host "Copying all files from $($binDir.FullName) to poppler\bin..."
            Copy-Item -Path "$($binDir.FullName)\*" -Destination "poppler\bin\" -Force
            
            # Verify that files were copied successfully
            if (Test-Path "poppler\bin\pdfinfo.exe") {
              Write-Host "Poppler binaries copied successfully."
              Write-Host "Final list of files in poppler\bin:"
              Get-ChildItem -Path "poppler\bin" | Format-Table Name, Length
            } else {
              Write-Error "Failed to copy files to poppler\bin\"
              exit 1
            }
          } else {
            Write-Error "Could not find pdfinfo.exe in the extracted content"
            exit 1
          }

          # Clean up temporary directory
          Remove-Item -Path "temp_poppler" -Recurse -Force
          Remove-Item -Path "poppler.zip" -Force

      - name: Download Poppler for macOS
        if: runner.os == 'macOS'
        run: |
          brew install poppler
          echo "Poppler installation directory: $(brew --prefix poppler)"

          # Create poppler directory structure
          mkdir -p poppler/bin
          mkdir -p poppler/lib

          # Ensure we have write permissions
          chmod -R 755 poppler

          # Copy binaries from Homebrew
          cp $(brew --prefix poppler)/bin/pdfinfo poppler/bin/ || echo "Warning: Could not copy pdfinfo"
          cp $(brew --prefix poppler)/bin/pdftoppm poppler/bin/ || echo "Warning: Could not copy pdftoppm"
          cp $(brew --prefix poppler)/bin/pdftotext poppler/bin/ || echo "Warning: Could not copy pdftotext"

          # Systematic approach to find and copy all dependencies
          echo "Finding and copying all dependencies..."

          # First, copy the main Poppler libraries
          cp $(brew --prefix poppler)/lib/libpoppler*.dylib poppler/lib/ || echo "Warning: Could not copy libpoppler"

          # Function to find and copy dependencies
          find_and_copy_deps() {
            local file=$1
            echo "Analyzing dependencies for: $file"
            
            # Get all dependencies
            deps=$(otool -L "$file" | grep -v "@rpath" | grep -v ":" | awk '{print $1}' | grep "^/")
            
            for dep in $deps; do
              # Skip system libraries
              if [[ "$dep" == /usr/lib/* || "$dep" == /System/* ]]; then
                continue
              fi
              
              # Get the basename of the dependency
              dep_basename=$(basename "$dep")
              
              # If we haven't copied this dependency yet, copy it
              if [ ! -f "poppler/lib/$dep_basename" ]; then
                echo "Copying dependency: $dep"
                sudo cp "$dep" poppler/lib/ || echo "Warning: Could not copy $dep_basename"
                sudo chmod 644 "poppler/lib/$dep_basename" || echo "Warning: Could not chmod $dep_basename"
                sudo chown $(whoami) "poppler/lib/$dep_basename" || echo "Warning: Could not chown $dep_basename"
                
                # Recursively find dependencies of this dependency
                find_and_copy_deps "$dep"
              fi
            done
          }

          # Start with the Poppler binaries
          for bin in poppler/bin/*; do
            find_and_copy_deps "$bin"
          done

          # Then process all libraries we've copied so far
          for lib in poppler/lib/*.dylib; do
            if [ -f "$lib" ]; then
              find_and_copy_deps "$lib"
            fi
          done

          # Add libassuan explicitly since it was mentioned in the error
          if [ ! -f "poppler/lib/libassuan.9.dylib" ]; then
            cp $(brew --prefix libassuan)/lib/libassuan*.dylib poppler/lib/ || echo "Warning: Could not copy libassuan"
          fi

          echo "Libraries in poppler/lib:"
          ls -la poppler/lib

      - name: Install create-dmg (macOS) and set up certificate for signing and notarization
        if: ${{ runner.os == 'macOS' }}
        env:
          CERTIFICATE_BASE64: ${{ secrets.APPLE_DEVELOPER_CERTIFICATE_P12_BASE64 }}
          CERTIFICATE_PASSWORD: ${{ secrets.APPLE_DEVELOPER_CERTIFICATE_PASSWORD }}
        run: |
          brew install create-dmg
          echo $CERTIFICATE_BASE64 | base64 --decode > certificate.p12
          security create-keychain -p "" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "" build.keychain
          security set-keychain-settings -t 3600 -u build.keychain
          security import certificate.p12 -k build.keychain -P $CERTIFICATE_PASSWORD -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "" build.keychain
          security find-identity -v -p codesigning build.keychain

      - name: Build with Nuitka (macOS)
        if: ${{ runner.os == 'macOS' }}
        env:
          APPLE_DEVELOPER_ID: ${{ secrets.APPLE_DEVELOPER_ID }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_DEVELOPER_TEAM_ID }}
          APPLE_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}
        run: |
          # Build app
          python -m nuitka --standalone \
            --output-dir=macOSBuild \
            --plugin-enable=pyside6 \
            --company-name="Buddhist Digital Resource Center" \
            --product-name="BDRC Tibetan OCR" \
            --file-version='${{ env.VERSION }}' \
            --product-version='${{ env.VERSION }}' \
            --macos-app-name="BDRC Tibetan OCR" \
            --macos-create-app-bundle \
            --assume-yes-for-downloads \
            --include-data-dir=./Assets=Assets \
            --include-data-dir=./Models=Models \
            --include-data-dir=./OCRModels=OCRModels \
            --include-data-dir=./poppler=poppler \
            main.py
            
          # Make the Poppler binaries executable
          echo "Making Poppler binaries executable..."
          chmod +x "macOSBuild/main.app/Contents/MacOS/poppler/bin/pdfinfo"
          chmod +x "macOSBuild/main.app/Contents/MacOS/poppler/bin/pdftoppm"
          chmod +x "macOSBuild/main.app/Contents/MacOS/poppler/bin/pdftotext"

          # Create lib directory and copy the library files to the correct location
          echo "Creating lib directory and copying Poppler library files..."
          mkdir -p "macOSBuild/main.app/Contents/MacOS/poppler/lib"
          cp poppler/lib/*.dylib "macOSBuild/main.app/Contents/MacOS/poppler/lib/"

          # Use install_name_tool to update library paths in all dylibs
          echo "Updating library paths in dylibs..."

          # First, get a list of all dylibs
          DYLIBS=$(ls "macOSBuild/main.app/Contents/MacOS/poppler/lib/"*.dylib)

          # For each dylib, update its ID and fix its dependencies
          for dylib in $DYLIBS; do
            # Get the basename of the dylib
            basename=$(basename "$dylib")
            
            # Update the ID of the library itself
            install_name_tool -id "@executable_path/../lib/$basename" "$dylib"
            
            # Find all dependencies of this dylib
            deps=$(otool -L "$dylib" | grep -v ":" | awk '{print $1}')
            
            # For each dependency, if it's one of our libraries, update its path
            for dep in $deps; do
              dep_basename=$(basename "$dep")
              if [ -f "macOSBuild/main.app/Contents/MacOS/poppler/lib/$dep_basename" ]; then
                install_name_tool -change "$dep" "@executable_path/../lib/$dep_basename" "$dylib"
                echo "Updated $basename to use @executable_path/../lib/$dep_basename"
              fi
            done
          done

          # Update the binaries to use the libraries in the lib directory
          for bin in pdfinfo pdftoppm pdftotext; do
            bin_path="macOSBuild/main.app/Contents/MacOS/poppler/bin/$bin"
            deps=$(otool -L "$bin_path" | grep -v ":" | awk '{print $1}')
            
            for dep in $deps; do
              dep_basename=$(basename "$dep")
              if [ -f "macOSBuild/main.app/Contents/MacOS/poppler/lib/$dep_basename" ]; then
                install_name_tool -change "$dep" "@executable_path/../lib/$dep_basename" "$bin_path"
                echo "Updated $bin to use @executable_path/../lib/$dep_basename"
              fi
            done
          done

          # List the contents to verify
          echo "Contents of app bundle poppler directory:"
          ls -la "macOSBuild/main.app/Contents/MacOS/poppler"
          echo "Contents of app bundle poppler/bin directory:"
          ls -la "macOSBuild/main.app/Contents/MacOS/poppler/bin"
          echo "Contents of app bundle poppler/lib directory:"
          ls -la "macOSBuild/main.app/Contents/MacOS/poppler/lib"

          # Rename the app bundle
          mv "macOSBuild/main.app" "macOSBuild/BDRC Tibetan OCR.app"

          # Set up icon
          RESOURCES_PATH="macOSBuild/BDRC Tibetan OCR.app/Contents/Resources"
          mkdir -p "$RESOURCES_PATH"
          cp "logo.icns" "$RESOURCES_PATH/"
          /usr/libexec/PlistBuddy -c "Add :CFBundleIconFile string logo" "macOSBuild/BDRC Tibetan OCR.app/Contents/Info.plist"
          touch "macOSBuild/BDRC Tibetan OCR.app"

          # Sign components
          find "macOSBuild/BDRC Tibetan OCR.app" -type f \( -name "*.dylib" -o -name "*.so" -o -name "*.onnx" \) -exec \
            codesign --force --verify --options=runtime --timestamp \
            --sign "Developer ID Application: Jeremy Frere ($APPLE_TEAM_ID)" \
            --identifier "io.bdrc.ocrapp" {} +

          # Sign app bundle
          codesign --force --verify --options=runtime --timestamp --deep \
            --sign "Developer ID Application: Jeremy Frere ($APPLE_TEAM_ID)" \
            --identifier "io.bdrc.ocrapp" \
            "macOSBuild/BDRC Tibetan OCR.app"

          # Create and notarize zip
          ditto -c -k --keepParent "macOSBuild/BDRC Tibetan OCR.app" "macOSBuild/app.zip"

          # Function to retry notarization
          retry_notarize() {
            local file="$1"
            local max_attempts=3
            local attempt=1
            local wait_time=30
            
            while [ $attempt -le $max_attempts ]; do
              echo "Notarization attempt $attempt of $max_attempts for $file..."
              if xcrun notarytool submit "$file" \
                --apple-id "$APPLE_DEVELOPER_ID" \
                --password "$APPLE_PASSWORD" \
                --team-id "$APPLE_TEAM_ID" \
                --wait; then
                echo "Notarization successful for $file"
                return 0
              fi
              
              echo "Notarization attempt $attempt failed for $file"
              if [ $attempt -lt $max_attempts ]; then
                echo "Waiting $wait_time seconds before next attempt..."
                sleep $wait_time
                # Increase wait time for next attempt
                wait_time=$((wait_time * 2))
              fi
              attempt=$((attempt + 1))
            done
            
            echo "All notarization attempts failed for $file"
            return 1
          }

          # Notarize app with retry
          if ! retry_notarize "macOSBuild/app.zip"; then
            echo "Failed to notarize app after all attempts"
            exit 1
          fi

          # Staple app
          xcrun stapler staple "macOSBuild/BDRC Tibetan OCR.app"

          # Create and sign DMG
          create-dmg \
            --volname "BDRC Tibetan OCR" \
            --volicon "logo.icns" \
            --window-pos 200 120 \
            --window-size 800 400 \
            --icon-size 100 \
            --icon "BDRC Tibetan OCR.app" 200 190 \
            --hide-extension "BDRC Tibetan OCR.app" \
            --app-drop-link 600 185 \
            "BDRC Tibetan OCR.dmg" \
            "macOSBuild/BDRC Tibetan OCR.app"

          # Sign and notarize DMG
          codesign --force --verify --options=runtime --timestamp \
            --sign "Developer ID Application: Jeremy Frere ($APPLE_TEAM_ID)" \
            --identifier "io.bdrc.ocrapp" \
            "BDRC Tibetan OCR.dmg"

          # Notarize DMG with retry
          if ! retry_notarize "BDRC Tibetan OCR.dmg"; then
            echo "Failed to notarize DMG after all attempts"
            exit 1
          fi

          xcrun stapler staple "BDRC Tibetan OCR.dmg"

      - name: Build with Nuitka (Windows)
        if: ${{ runner.os == 'Windows' }}
        run: |
          # List all files in poppler directory
          Write-Host "Files in poppler\:"
          Get-ChildItem -Path "poppler" -Recurse | Format-Table Name, Length
          
          # Check if OCRModels directory exists
          Write-Host "Checking OCRModels directory..."
          if (Test-Path "OCRModels") {
            Write-Host "OCRModels directory exists, listing contents:"
            Get-ChildItem -Path "OCRModels" -Recurse | Format-Table Name, Length
          } else {
            Write-Host "OCRModels directory doesn't exist yet, this is expected"
          }

          # Build app
          python -m nuitka --standalone `
            --output-dir=WindowsBuild `
            --plugin-enable=pyside6 `
            --windows-console-mode=disable `
            --windows-icon-from-ico=logo.ico `
            --company-name="Buddhist Digital Resource Center" `
            --product-name="BDRC Tibetan OCR" `
            --file-version='${{ env.VERSION }}' `
            --product-version='${{ env.VERSION }}' `
            --assume-yes-for-downloads `
            --include-data-dir=Assets=Assets `
            --include-data-dir=Models=Models `
            --include-data-dir=OCRModels=OCRModels `
            --include-data-files=poppler/bin/*=poppler/bin/ `
            main.py

          # Copy poppler to the build directory
          Write-Host "Copying Poppler to build directory..."
          Copy-Item -Path "poppler" -Destination "WindowsBuild\main.dist\" -Recurse -Force
          
          # Rename the executable
          Write-Host "Renaming executable..."
          Rename-Item -Path "WindowsBuild\main.dist\main.exe" -NewName "BDRC Tibetan OCR.exe"
          
          # Create a zip file for the release
          Write-Host "Creating zip file for release..."
          Compress-Archive -Path "WindowsBuild\main.dist\*" -DestinationPath "WindowsBuild\$env:ARTIFACT_NAME.zip" -Force

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: ${{ env.ARTIFACT_PATH }}
          compression-level: 0

  create-release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    permissions:
      contents: write
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          merge-multiple: true

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false
          generate_release_notes: true
          files: artifacts/**/*
